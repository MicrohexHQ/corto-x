#package /corto/x

// Tokens describe a simple regex
class token::
  regex: string
  type: lang/type
  int16 construct()
  int16 init()

// Patterns are composite expressions that can be reduced to a regex
class pattern: struct, hidden, attr = attr_default|attr_scoped::
  struct parameter::
    name: string
    type: lang/type

  expr: string
  type: lang/type

  scope: object, local|readonly
  regex: string, local|readonly
  params: list{x/pattern/parameter}, local|readonly
  
  // info for dependency resolver so patterns are inserted in right order
  deps: list{object}, private 

  int16 construct()
  int16 init()

// Rule expressions are matched with a single line from the input
procedure rule: method, base=core/route, options={parentState=DECLARED}::
  member pattern: x/pattern, private
  member regex: string
  member compiledRegex: word
  int16 construct() method
  void destruct() method

// The parser invokes the rule that matches the input
core/router parser {
  routerDataName="node", 
  routerDataType=object, 
  elementSeparator=null
} ::
  int32 matchRoute(core/route route, stringseq pattern, any param, out:any routerData)
  core/route findRoute(object instance, stringseq pattern, any param, out:any routerData)
  int16 construct()

  member ruleChain: word

// Visitor class for x/parser
class visitor

procedure callback: method, base=lang/method, options={parentState=DECLARED|DEFINED, parentType=x/visitor}::
  int16 construct() method

class visitor: class, private, options={defaultProcedureType=x/callback}::
  parser: x/parser
  int16 construct()

// Utility function to feed a file to a parser
int16 parseFile(object instance, string file, object visitor)


